<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>problem</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="problem">prb_modelISNOTEMPTY^stateVALCHANGES^EQ<item endquery="false" field="prb_model" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Problem Model: Check State Transition</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	if (!previous)
		return;
	
	var problemModel = new ProblemModel(current.prb_model.getRefRecord());
	var stateFieldName = problemModel.getStateFieldName();
	var initialStateGr = problemModel.getInitialState();
	
	// If it's a new record in the initial state, or the model has changed and it's in the initial state don't do anything.
	if ((current.isNewRecord() || current.prb_model.changes()) && current.getValue(stateFieldName) === initialStateGr.getValue("state_value"))
		return;
	
	var previousState = previous.getValue(stateFieldName);
	var previousDisplayValue = previous.getDisplayValue(stateFieldName);
	
	if ((!previousState && current.isNewRecord()) ||
		(current.prb_model.changes() && current.getValue(stateFieldName) !== initialStateGr.getValue("state_value"))) {
		previousState = initialStateGr;
		previousDisplayValue = initialStateGr.getDisplayValue("state_label");
	}
	
	// Check if we can transition between the states.
	if (!problemModel.canTransition(previousState, current)) {
		gs.addErrorMessage(gs.getMessage("Problem model '{0}' prevented state transition from {1} to {2}", [current.getDisplayValue("prb_model"), previousDisplayValue, current.getDisplayValue(stateFieldName)]));
		current.setAbortAction(true);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-02-29 16:21:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path/>
        <sys_id>10133e13b7e002102e13bea0be11a92f</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Problem Model: Check State Transition</sys_name>
        <sys_overrides/>
        <sys_package display_value="Problem - Models" source="com.snc.problem.problem_model">fb789fb8d00722105590fd9a5a77e759</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Customizations - Upgrade Plan">f90ff3ea47ecb2105dc6f19f016d43cb</sys_scope>
        <sys_update_name>sys_script_10133e13b7e002102e13bea0be11a92f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-16 02:31:48</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=10133e13b7e002102e13bea0be11a92f"/>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Global Customizations - Upgrade Plan">f90ff3ea47ecb2105dc6f19f016d43cb</claim_owner_scope>
        <claim_timestamp>199eadbf70a0000002</claim_timestamp>
        <metadata_update_name>sys_script_10133e13b7e002102e13bea0be11a92f</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>Global Customizations - Upgrade Plan</previous_claim_name>
        <previous_claim_scope>f90ff3ea47ecb2105dc6f19f016d43cb</previous_claim_scope>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-16 02:31:48</sys_created_on>
        <sys_id>411f7bea47ecb2105dc6f19f016d430d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-16 02:31:48</sys_updated_on>
    </sys_claim>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Global Customizations - Upgrade Plan">f90ff3ea47ecb2105dc6f19f016d43cb</claim_owner_scope>
        <claim_timestamp>199eadbf70a0000001</claim_timestamp>
        <metadata_update_name>sys_script_10133e13b7e002102e13bea0be11a92f</metadata_update_name>
        <previous_claim_app_version/>
        <previous_claim_name>com.snc.problem.problem_model</previous_claim_name>
        <previous_claim_scope>com.snc.problem.problem_model</previous_claim_scope>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-16 02:31:48</sys_created_on>
        <sys_id>091f7bea47ecb2105dc6f19f016d430d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-16 02:31:48</sys_updated_on>
    </sys_claim>
</record_update>
